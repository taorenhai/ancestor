syntax = "proto3";
package ancestor.meta;
option go_package = "meta";

import weak "gogoproto/gogo.proto";

option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;


// Timestamp represents a state of the hybrid logical clock.
message Timestamp {
    // Holds a wall time, typically a unix epoch time
    // expressed in nanoseconds.
    int64 wall_time = 1;
    // The logical component captures causality for events whose wall
    // times are equal. It is effectively bounded by (maximum clock
    // skew)/(minimal ns between events) and nearly impossible to
    // overflow.
    int32 logical = 2;
}

enum ValueType {
    // This is a subset of the SQL column type values, representing the
    // underlying storage for various types.
    UNKNOWN = 0;
    INT = 1;
    FLOAT = 2;
    BYTES = 3;
    TIME = 4;

    // TIMESERIES is applied to values which contain InternalTimeSeriesData.
    TIMESERIES = 100;
    METADATA = 101;
    TRANSACTION = 102;
    MVCCVALUE = 103;
}

// Span is supplied with every storage node request.
message Span {
    // The key for request. If the request operates on a range, this
    // represents the starting key for the range.
    bytes key = 3 [(gogoproto.casttype) = "Key"];
    // The end key is empty if the request spans only a single key. Otherwise,
    // it must order strictly after Key. In such a case, the header indicates
    // that the operation takes place on the key range from Key to EndKey,
    // including Key and excluding EndKey.
    bytes end_key = 4 [(gogoproto.casttype) = "Key"];
}

// Value specifies the value at a key. Multiple values at the same key
// are supported based on timestamp.
message Value {
    option (gogoproto.goproto_getters) = false;
    // Bytes is the byte slice value.
    bytes bytes = 1;
    // Checksum is a CRC-32-IEEE checksum of the key + value, in that order.
    // If this is an integer value, then the value is interpreted as an 8
    // byte, big-endian encoded value. This value is set by the client on
    // writes to do end-to-end integrity verification. If the checksum is
    // incorrect, the write operation will fail. If the client does not
    // wish to use end-to-end checksumming, this value should be nil.
    fixed32 checksum = 2;
    // Timestamp of value.
    Timestamp timestamp = 3;

    // Tag is the type of the value.
    ValueType tag = 4;
}

// KeyValue is a pair of Key and Value for returned Key/Value pairs
// from ScanRequest/ScanResponse. It embeds a Key and a Value.
message KeyValue {
    bytes key = 1 [(gogoproto.casttype) = "Key"];
    Value value = 2 [(gogoproto.nullable) = false];
}

// MVCCKeyValue contains the raw bytes of the value for a key.
message MVCCKeyValue {
    bytes key = 1 [(gogoproto.casttype) = "MVCCKey"];
    bytes value = 2;
}

//SnapshotValues stores key values from rocksdb
message SnapshotKeyValues {
    repeated MVCCKeyValue key_values = 1 [(gogoproto.nullable) = false];
}

// TransactionStatus specifies possible states for a transaction.
enum TransactionStatus {
    option (gogoproto.goproto_enum_prefix) = false;
    // PENDING is the default state for a new transaction. Transactions
    // move from PENDING to one of COMMITTED or ABORTED. Mutations made
    // as part of a PENDING transactions are recorded as "intents" in
    // the underlying MVCC model.
    PENDING = 0;
    // COMMITTED is the state for a transaction which has been
    // committed. Mutations made as part of a transaction which is moved
    // into COMMITTED state become durable and visible to other
    // transactions, moving from "intents" to permanent versioned
    // values.
    COMMITTED = 1;
    // ABORTED is the state for a transaction which has been aborted.
    // Mutations made as part of a transaction which is moved into
    // ABORTED state are deleted and are never made visible to other
    // transactions.
    ABORTED = 2;
}

// A Transaction is a unit of work performed on the database.
message Transaction {
    option (gogoproto.goproto_stringer) = true;

    string name = 1;
    // ID is a unique UUID value which identifies the transaction.
    bytes id = 2 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "Key"];
    int32 priority = 3;

    TransactionStatus status = 4;

    // The last heartbeat timestamp.
    int64 last_heartbeat = 5;

    Timestamp timestamp = 6 [(gogoproto.nullable) = false];

    // A one-indexed sequence number which is increased on each batch sent as
    // part of the transaction. Used to prevent replay and out-of-order
    // application protection (by means of a transaction retry).
    uint32 Sequence = 7;
}

// Intent is used to communicate the location of an intent.
message Intent {
    Span span = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
    Transaction txn = 2 [(gogoproto.nullable) = false];
}

