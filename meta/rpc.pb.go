// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc.proto

package meta

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type HeartbeatRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeartbeatRequest) Reset()         { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string { return proto.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()    {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_b604f5bb700efdd8, []int{0}
}
func (m *HeartbeatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartbeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartbeatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HeartbeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatRequest.Merge(dst, src)
}
func (m *HeartbeatRequest) XXX_Size() int {
	return m.Size()
}
func (m *HeartbeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatRequest proto.InternalMessageInfo

type HeartbeatResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeartbeatResponse) Reset()         { *m = HeartbeatResponse{} }
func (m *HeartbeatResponse) String() string { return proto.CompactTextString(m) }
func (*HeartbeatResponse) ProtoMessage()    {}
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_b604f5bb700efdd8, []int{1}
}
func (m *HeartbeatResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartbeatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartbeatResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HeartbeatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatResponse.Merge(dst, src)
}
func (m *HeartbeatResponse) XXX_Size() int {
	return m.Size()
}
func (m *HeartbeatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*HeartbeatRequest)(nil), "ancestor.meta.HeartbeatRequest")
	proto.RegisterType((*HeartbeatResponse)(nil), "ancestor.meta.HeartbeatResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RaftMessageClient is the client API for RaftMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftMessageClient interface {
	RaftMessage(ctx context.Context, opts ...grpc.CallOption) (RaftMessage_RaftMessageClient, error)
}

type raftMessageClient struct {
	cc *grpc.ClientConn
}

func NewRaftMessageClient(cc *grpc.ClientConn) RaftMessageClient {
	return &raftMessageClient{cc}
}

func (c *raftMessageClient) RaftMessage(ctx context.Context, opts ...grpc.CallOption) (RaftMessage_RaftMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RaftMessage_serviceDesc.Streams[0], "/ancestor.meta.RaftMessage/RaftMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftMessageRaftMessageClient{stream}
	return x, nil
}

type RaftMessage_RaftMessageClient interface {
	Send(*RaftMessageBatchRequest) error
	CloseAndRecv() (*RaftMessageBatchResponse, error)
	grpc.ClientStream
}

type raftMessageRaftMessageClient struct {
	grpc.ClientStream
}

func (x *raftMessageRaftMessageClient) Send(m *RaftMessageBatchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftMessageRaftMessageClient) CloseAndRecv() (*RaftMessageBatchResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RaftMessageBatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RaftMessageServer is the server API for RaftMessage service.
type RaftMessageServer interface {
	RaftMessage(RaftMessage_RaftMessageServer) error
}

func RegisterRaftMessageServer(s *grpc.Server, srv RaftMessageServer) {
	s.RegisterService(&_RaftMessage_serviceDesc, srv)
}

func _RaftMessage_RaftMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftMessageServer).RaftMessage(&raftMessageRaftMessageServer{stream})
}

type RaftMessage_RaftMessageServer interface {
	SendAndClose(*RaftMessageBatchResponse) error
	Recv() (*RaftMessageBatchRequest, error)
	grpc.ServerStream
}

type raftMessageRaftMessageServer struct {
	grpc.ServerStream
}

func (x *raftMessageRaftMessageServer) SendAndClose(m *RaftMessageBatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftMessageRaftMessageServer) Recv() (*RaftMessageBatchRequest, error) {
	m := new(RaftMessageBatchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RaftMessage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ancestor.meta.RaftMessage",
	HandlerType: (*RaftMessageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RaftMessage",
			Handler:       _RaftMessage_RaftMessage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

// NodeMessageClient is the client API for NodeMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeMessageClient interface {
	NodeMessage(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
	HeartbeatMessage(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type nodeMessageClient struct {
	cc *grpc.ClientConn
}

func NewNodeMessageClient(cc *grpc.ClientConn) NodeMessageClient {
	return &nodeMessageClient{cc}
}

func (c *nodeMessageClient) NodeMessage(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/ancestor.meta.NodeMessage/NodeMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeMessageClient) HeartbeatMessage(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/ancestor.meta.NodeMessage/HeartbeatMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeMessageServer is the server API for NodeMessage service.
type NodeMessageServer interface {
	NodeMessage(context.Context, *BatchRequest) (*BatchResponse, error)
	HeartbeatMessage(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
}

func RegisterNodeMessageServer(s *grpc.Server, srv NodeMessageServer) {
	s.RegisterService(&_NodeMessage_serviceDesc, srv)
}

func _NodeMessage_NodeMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeMessageServer).NodeMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ancestor.meta.NodeMessage/NodeMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeMessageServer).NodeMessage(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeMessage_HeartbeatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeMessageServer).HeartbeatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ancestor.meta.NodeMessage/HeartbeatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeMessageServer).HeartbeatMessage(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeMessage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ancestor.meta.NodeMessage",
	HandlerType: (*NodeMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NodeMessage",
			Handler:    _NodeMessage_NodeMessage_Handler,
		},
		{
			MethodName: "HeartbeatMessage",
			Handler:    _NodeMessage_HeartbeatMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func (m *HeartbeatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HeartbeatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HeartbeatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HeartbeatResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRpc(x uint64) (n int) {
	return sovRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HeartbeatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartbeatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_rpc_b604f5bb700efdd8) }

var fileDescriptor_rpc_b604f5bb700efdd8 = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4d, 0xcc, 0x4b, 0x4e, 0x2d, 0x2e, 0xc9, 0x2f, 0xd2,
	0xcb, 0x4d, 0x2d, 0x49, 0x94, 0x12, 0x2a, 0x4a, 0x4c, 0x2b, 0x01, 0xb1, 0x52, 0x12, 0x4b, 0x12,
	0x21, 0x4a, 0xa4, 0x38, 0x13, 0x0b, 0x32, 0x21, 0x4c, 0x25, 0x21, 0x2e, 0x01, 0x8f, 0xd4, 0xc4,
	0xa2, 0x92, 0xa4, 0xd4, 0xc4, 0x92, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x25, 0x61, 0x2e,
	0x41, 0x24, 0xb1, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0xa3, 0x42, 0x2e, 0xee, 0xa0, 0xc4, 0xb4,
	0x12, 0xdf, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0xa1, 0x24, 0x54, 0xae, 0x9a, 0x1e, 0x8a, 0xad,
	0x7a, 0x48, 0x72, 0x4e, 0x89, 0x25, 0xc9, 0x19, 0x50, 0xa3, 0xa5, 0xd4, 0x09, 0xaa, 0x83, 0x58,
	0xa7, 0xc4, 0xa0, 0xc1, 0x68, 0xb4, 0x8e, 0x91, 0x8b, 0xdb, 0x2f, 0x3f, 0x25, 0x15, 0x66, 0x89,
	0x07, 0x2a, 0x57, 0x1a, 0xcd, 0x2c, 0x14, 0x8b, 0x64, 0xb0, 0x4b, 0x42, 0x4c, 0x17, 0x0a, 0x45,
	0xf2, 0x35, 0xcc, 0x38, 0x79, 0x34, 0x1d, 0xe8, 0xc1, 0x22, 0xa5, 0x80, 0x5b, 0x01, 0xc4, 0x58,
	0x27, 0xa1, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x31, 0x8a,
	0x05, 0xa4, 0x2a, 0x89, 0x0d, 0x1c, 0xce, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x91, 0x73,
	0x46, 0x6f, 0xa2, 0x01, 0x00, 0x00,
}
