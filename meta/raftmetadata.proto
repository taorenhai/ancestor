syntax = "proto3";
package ancestor.meta;
option go_package = "meta";

import "github.com/coreos/etcd/raft/raftpb/raft.proto";
import "api.proto";
import weak "gogoproto/gogo.proto";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

// RaftMessageRequest is the request used to send raft messages using
// our protobuf-based RPC codec.
message RaftMessageRequest {
    uint64 range_id = 1 [(gogoproto.customname) = "RangeID", (gogoproto.casttype) = "RangeID"];
    int32 from_node_id = 2 [(gogoproto.customname) = "FromNodeID", (gogoproto.casttype) = "NodeID"];
    int32 to_node_id = 3 [(gogoproto.customname) = "ToNodeID", (gogoproto.casttype) = "NodeID"];
    raftpb.Message message = 4 [(gogoproto.nullable) = false];
}


// RaftMessageResponse is an empty message returned by raft RPCs. If a
// response is needed it will be sent as a separate message.
message RaftMessageResponse {
}

// RaftMessageBatchRequest A RaftMessageBatchRequest contains one or more requests
message RaftMessageBatchRequest {
    repeated RaftMessageRequest requests = 1 [(gogoproto.nullable) = false];
}

// RaftMessageBatchResponse A RaftMessageBatchResponse contains one or more responses
message RaftMessageBatchResponse {
    repeated RaftMessageResponse responses = 1 [(gogoproto.nullable) = false];
}

// A RaftCommand is a command which can be serialized and sent via raft.
message RaftCommand {
    int64 range_id = 1 [(gogoproto.customname) = "RangeID", (gogoproto.casttype) = "RangeID"];

    BatchRequest request = 2 [(gogoproto.nullable) = false];
}

// raft message
message RaftData {
    string id = 1;
    RaftCommand cmd = 2 [(gogoproto.nullable) = false];
}
